name: Docker Image CI

on:
  workflow_dispatch:
    inputs:
      UpperCaseForce:
        required: false
        type: boolean
        description: 'Force uppercase'

  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest

    outputs:
      docker_image: ${{ steps.docker_build.outputs.docker_image }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: academy
          POSTGRES_PASSWORD: academy
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
   

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-java@v4
      if: ${{ !env.ACT }}
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Docker Build
      id: docker_build
      uses: antonio-pinheiro-wtc/teste/.github/actions/docker_build@main
      with:
        image_name: academy

    - name: Login to Docker Hub
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker Push
      uses: antonio-pinheiro-wtc/teste/.github/actions/push@main
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        image_name: ${{ env.DOCKER_IMAGE_NAME }}

    - name: Create PostgreSQL container
      if: ${{ env.ACT }}
      uses: antonio-pinheiro-wtc/teste/.github/actions/postgres-container@main
      with:
        name: actions-postgres
        port: 41200
        username: academy
        password: academy

    - name: Run Quarkus Tests
      run:  |
        if [[ "${ACT}" == "true" ]]; then
          mvn test -Dquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:41200/postgres
        else
          mvn test
        fi
      shell: bash

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: deploy
    steps:
    - uses: actions/checkout@v3

    - name: Replace variables on kubernetes templates
      env:
        upper_case_force: ${{ github.event.inputs.UpperCaseForce }}
        database_username: ${{ secrets.DATABASE_USERNAME }}
        database_password: ${{ secrets.DATABASE_PASSWORD }}
        docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
        docker_image: ${{ needs.build.outputs.docker_image }}
      run: |
        database_username_base64=$(echo -n "$database_username" | base64)
        database_password_base64=$(echo -n "$database_password" | base64)
    
        if [ -z "$upper_case_force" ]; then
          upper_case_force="false"
        fi
        
        sed -i'' -e "s/%DATABASE_USERNAME%/$database_username_base64/g" kubernetes-postgres/secret.yaml
        sed -i'' -e "s/%DATABASE_PASSWORD%/$database_password_base64/g" kubernetes-postgres/secret.yaml

        sed -i'' -e "s/%REPOSITORY_PLACEHOLDER%/$docker_username/g" kubernetes/deployment.yaml
        sed -i'' -e "s/%IMAGE_PLACEHOLDER%/$docker_image/g" kubernetes/deployment.yaml
        
        sed -i'' -e "s/%DATABASE_USERNAME%/$database_username_base64/g" kubernetes/secret.yaml
        sed -i'' -e "s/%DATABASE_PASSWORD%/$database_password_base64/g" kubernetes/secret.yaml
        sed -i'' -e "s/%FORCE_UPPERCASE%/$upper_case_force/g" kubernetes/configmap.yaml
      shell: bash

    - name: Apply Deployment of PostgreSQL and the Application
      if: ${{ env.ACT }}
      run: |
        kubectl apply -f kubernetes-postgres -n academy
        kubectl wait --for=condition=available deployment/postgres --timeout=60s -n academy  
        kubectl apply -f kubernetes -n academy